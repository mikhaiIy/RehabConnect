// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RehabConnect.DataAccess.Data;

#nullable disable

namespace RehabConnect.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RehabConnect.Models.Billing", b =>
                {
                    b.Property<int>("BillingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillingID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ParentID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BillingID");

                    b.HasIndex("ParentID");

                    b.ToTable("Billings");
                });

            modelBuilder.Entity("RehabConnect.Models.CustomerSupport", b =>
                {
                    b.Property<int>("CSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CSID"));

                    b.Property<string>("CSAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CSAge")
                        .HasColumnType("int");

                    b.Property<string>("CSEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CSIC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CSName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CSNationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CSPhoneNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CSReligion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CSSex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CSID");

                    b.ToTable("CustomerSupports");
                });

            modelBuilder.Entity("RehabConnect.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceID"));

                    b.Property<int>("BillingID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InvoiceID");

                    b.HasIndex("BillingID");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("RehabConnect.Models.ParentDetail", b =>
                {
                    b.Property<int>("ParentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParentID"));

                    b.Property<string>("FatherAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherIC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherOccupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherPhoneNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherPostcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherRace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherWorkAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseholdIncome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherIC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherOccupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherPhoneNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherPostcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherRace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherWorkAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParentID");

                    b.ToTable("ParentDetails");
                });

            modelBuilder.Entity("RehabConnect.Models.Program", b =>
                {
                    b.Property<int>("ProgramID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramID"));

                    b.Property<int>("NumOfSession")
                        .HasColumnType("int");

                    b.Property<int?>("PriceWeekday")
                        .HasColumnType("int");

                    b.Property<int?>("PriceWeekend")
                        .HasColumnType("int");

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StepId")
                        .HasColumnType("int");

                    b.HasKey("ProgramID");

                    b.HasIndex("StepId");

                    b.ToTable("Programs");

                    b.HasData(
                        new
                        {
                            ProgramID = 1,
                            NumOfSession = 1,
                            ProgramName = "Consultation",
                            StepId = 1
                        },
                        new
                        {
                            ProgramID = 2,
                            NumOfSession = 3,
                            ProgramName = "Assessment",
                            StepId = 2
                        },
                        new
                        {
                            ProgramID = 3,
                            NumOfSession = 1,
                            ProgramName = "Full Development Report",
                            StepId = 2
                        },
                        new
                        {
                            ProgramID = 4,
                            NumOfSession = 4,
                            PriceWeekday = 500,
                            PriceWeekend = 600,
                            ProgramName = "Program A",
                            StepId = 3
                        },
                        new
                        {
                            ProgramID = 5,
                            NumOfSession = 8,
                            PriceWeekday = 800,
                            PriceWeekend = 900,
                            ProgramName = "Program B",
                            StepId = 3
                        },
                        new
                        {
                            ProgramID = 6,
                            NumOfSession = 12,
                            PriceWeekday = 1100,
                            PriceWeekend = 1200,
                            ProgramName = "Program C",
                            StepId = 3
                        },
                        new
                        {
                            ProgramID = 7,
                            NumOfSession = 20,
                            PriceWeekday = 2000,
                            PriceWeekend = 2100,
                            ProgramName = "Program D",
                            StepId = 3
                        },
                        new
                        {
                            ProgramID = 8,
                            NumOfSession = 3,
                            ProgramName = "Assessment",
                            StepId = 4
                        },
                        new
                        {
                            ProgramID = 9,
                            NumOfSession = 1,
                            ProgramName = "Full Development Report",
                            StepId = 4
                        },
                        new
                        {
                            ProgramID = 10,
                            NumOfSession = 4,
                            PriceWeekday = 1000,
                            PriceWeekend = 1200,
                            ProgramName = "Ready to School A",
                            StepId = 5
                        },
                        new
                        {
                            ProgramID = 11,
                            NumOfSession = 8,
                            PriceWeekday = 2000,
                            PriceWeekend = 2200,
                            ProgramName = "Ready to School B",
                            StepId = 5
                        });
                });

            modelBuilder.Entity("RehabConnect.Models.Report", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportID"));

                    b.Property<int>("CSID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("SessionID")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("TherapistID")
                        .HasColumnType("int");

                    b.HasKey("ReportID");

                    b.HasIndex("CSID");

                    b.HasIndex("StudentID");

                    b.HasIndex("TherapistID");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("RehabConnect.Models.Roadmap", b =>
                {
                    b.Property<int>("RoadmapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoadmapId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoadmapId");

                    b.ToTable("Roadmap");

                    b.HasData(
                        new
                        {
                            RoadmapId = 1,
                            Name = "Idzmir Hub Roadmap"
                        },
                        new
                        {
                            RoadmapId = 2,
                            Name = "Test 2"
                        });
                });

            modelBuilder.Entity("RehabConnect.Models.Schedule", b =>
                {
                    b.Property<int>("ScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleID"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("ScheduleID");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("RehabConnect.Models.Session", b =>
                {
                    b.Property<int>("SessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionID"));

                    b.Property<int>("CSID")
                        .HasColumnType("int");

                    b.Property<int>("ProgramID")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("TherapistID")
                        .HasColumnType("int");

                    b.HasKey("SessionID");

                    b.HasIndex("CSID");

                    b.HasIndex("ProgramID");

                    b.HasIndex("ScheduleID");

                    b.HasIndex("StudentID");

                    b.HasIndex("TherapistID");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("RehabConnect.Models.Step", b =>
                {
                    b.Property<int>("StepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StepId"));

                    b.Property<bool>("CombinedPricing")
                        .HasColumnType("bit");

                    b.Property<int?>("PriceWeekday")
                        .HasColumnType("int");

                    b.Property<int?>("PriceWeekend")
                        .HasColumnType("int");

                    b.Property<int>("RoadmapId")
                        .HasColumnType("int");

                    b.Property<int>("StepNo")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StepId");

                    b.HasIndex("RoadmapId");

                    b.ToTable("Steps");

                    b.HasData(
                        new
                        {
                            StepId = 1,
                            CombinedPricing = true,
                            PriceWeekday = 150,
                            PriceWeekend = 200,
                            RoadmapId = 1,
                            StepNo = 1,
                            Title = "Screening and Consultation"
                        },
                        new
                        {
                            StepId = 2,
                            CombinedPricing = true,
                            PriceWeekday = 700,
                            PriceWeekend = 800,
                            RoadmapId = 1,
                            StepNo = 2,
                            Title = "Full Assessment"
                        },
                        new
                        {
                            StepId = 3,
                            CombinedPricing = false,
                            RoadmapId = 1,
                            StepNo = 3,
                            Title = "Intervention with consistency"
                        },
                        new
                        {
                            StepId = 4,
                            CombinedPricing = true,
                            PriceWeekday = 700,
                            PriceWeekend = 800,
                            RoadmapId = 1,
                            StepNo = 4,
                            Title = "Re-assessment"
                        },
                        new
                        {
                            StepId = 5,
                            CombinedPricing = false,
                            RoadmapId = 1,
                            StepNo = 5,
                            Title = "Road to School"
                        },
                        new
                        {
                            StepId = 6,
                            CombinedPricing = false,
                            RoadmapId = 2,
                            StepNo = 1,
                            Title = "Test1"
                        },
                        new
                        {
                            StepId = 7,
                            CombinedPricing = false,
                            RoadmapId = 2,
                            StepNo = 2,
                            Title = "Test2"
                        });
                });

            modelBuilder.Entity("RehabConnect.Models.Student", b =>
                {
                    b.Property<int>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentID"));

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChildAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChildAge")
                        .HasColumnType("int");

                    b.Property<string>("ChildBirthPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChildCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChildCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ChildDOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChildIC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChildName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChildNationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChildPassportNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChildPostcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChildRace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChildSex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeadlineDiagnose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnosisOrCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HospReccommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OccupationalTheraphyPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OthersUnitPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentDetailParentID")
                        .HasColumnType("int");

                    b.Property<string>("Pediatricians")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpeechTheoryPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentID");

                    b.HasIndex("ParentDetailParentID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("RehabConnect.Models.Therapist", b =>
                {
                    b.Property<int>("TherapistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TherapistID"));

                    b.Property<string>("TherapistAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TherapistAge")
                        .HasColumnType("int");

                    b.Property<string>("TherapistEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TherapistIC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TherapistName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TherapistNationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TherapistPhoneNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TherapistReligion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TherapistSex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TherapistID");

                    b.ToTable("Therapists");
                });

            modelBuilder.Entity("RehabConnect.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int?>("CSID")
                        .HasColumnType("int");

                    b.Property<int?>("TherapistID")
                        .HasColumnType("int");

                    b.HasIndex("CSID");

                    b.HasIndex("TherapistID");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RehabConnect.Models.Billing", b =>
                {
                    b.HasOne("RehabConnect.Models.ParentDetail", "ParentDetail")
                        .WithMany("Billings")
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentDetail");
                });

            modelBuilder.Entity("RehabConnect.Models.Invoice", b =>
                {
                    b.HasOne("RehabConnect.Models.Billing", "Billing")
                        .WithMany("Invoices")
                        .HasForeignKey("BillingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Billing");
                });

            modelBuilder.Entity("RehabConnect.Models.Program", b =>
                {
                    b.HasOne("RehabConnect.Models.Step", "Step")
                        .WithMany()
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Step");
                });

            modelBuilder.Entity("RehabConnect.Models.Report", b =>
                {
                    b.HasOne("RehabConnect.Models.CustomerSupport", "CustomerSupport")
                        .WithMany("Reports")
                        .HasForeignKey("CSID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehabConnect.Models.Student", "Student")
                        .WithMany("Reports")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehabConnect.Models.Therapist", "Therapist")
                        .WithMany("Reports")
                        .HasForeignKey("TherapistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerSupport");

                    b.Navigation("Student");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("RehabConnect.Models.Session", b =>
                {
                    b.HasOne("RehabConnect.Models.CustomerSupport", "CustomerSupport")
                        .WithMany("Sessions")
                        .HasForeignKey("CSID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehabConnect.Models.Program", "Program")
                        .WithMany("Sessions")
                        .HasForeignKey("ProgramID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehabConnect.Models.Schedule", "Schedule")
                        .WithMany("Sessions")
                        .HasForeignKey("ScheduleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehabConnect.Models.Student", "Student")
                        .WithMany("Sessions")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RehabConnect.Models.Therapist", "Therapist")
                        .WithMany("Sessions")
                        .HasForeignKey("TherapistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerSupport");

                    b.Navigation("Program");

                    b.Navigation("Schedule");

                    b.Navigation("Student");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("RehabConnect.Models.Step", b =>
                {
                    b.HasOne("RehabConnect.Models.Roadmap", "Roadmap")
                        .WithMany()
                        .HasForeignKey("RoadmapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roadmap");
                });

            modelBuilder.Entity("RehabConnect.Models.Student", b =>
                {
                    b.HasOne("RehabConnect.Models.ParentDetail", null)
                        .WithMany("Students")
                        .HasForeignKey("ParentDetailParentID");
                });

            modelBuilder.Entity("RehabConnect.Models.ApplicationUser", b =>
                {
                    b.HasOne("RehabConnect.Models.CustomerSupport", "CustomerSupport")
                        .WithMany()
                        .HasForeignKey("CSID");

                    b.HasOne("RehabConnect.Models.Therapist", "Therapist")
                        .WithMany()
                        .HasForeignKey("TherapistID");

                    b.Navigation("CustomerSupport");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("RehabConnect.Models.Billing", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("RehabConnect.Models.CustomerSupport", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("RehabConnect.Models.ParentDetail", b =>
                {
                    b.Navigation("Billings");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("RehabConnect.Models.Program", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("RehabConnect.Models.Schedule", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("RehabConnect.Models.Student", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("RehabConnect.Models.Therapist", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
